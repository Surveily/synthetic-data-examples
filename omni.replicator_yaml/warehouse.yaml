# Default scene settings. This script default is 1 (IsaacSim), so if you change
# the meters per unit or up axis, you need to alter the coordinates and rotations.

# IsaacSim default is 1, Code is 0.01
stage_unit_setting:
  settings.set_stage_meters_per_unit:
    meters_per_unit: 1

# IsaacSim default is "Z"", Code is "Y"
stage_up_axis_setting:
  settings.set_stage_up_axis:
    up_axis: Z

# Create the camera and render product
camera:
  create.camera:
    position: [0, 0, 0]
    rotation: [0, 0, 0]

render_product:
  create.render_product:
    camera: camera
    resolution: [1280, 720]

# Load the stage
stage:
  create.from_usd:
    usd: omniverse://localhost/Library/wh1.usd

# Select the objects in the stage
forklift:
  create.group:
    items:
      - /Replicator/Ref_Xform/Ref/forklift

floor:
  get.prims:
    semantics: [[class, floor]]

racks_and_walls:
  get.prims:
    semantics: [[class, rack], [class, wall]]

# Create the writer and initialize
writer:
  writers.get:
    name: KittiWriter
    init_params:
      semantic_filter_predicate: class:cagetrolley
      # semantic_filter_predicate: class:sign|cone
      output_dir: /workspaces/synthetic-data-examples/.out/Warehouse

writer_attach:
  writer.attach:
    render_products: render_product

# Set the trigger as on_frame
trigger:
  trigger.on_frame:
    max_execs: 10
    rt_subframes: 3

# When the trigger executes, run the following logic
with_trigger:
  with.trigger:
    # move the camera around and rotate
    with.camera:
      modify.pose:
        position:
          distribution.uniform:
            lower: [-23.6, -3, 2.5]
            upper: [3.03, 3, 7.5]
        rotation:
          distribution.uniform:
            lower: [0, -30, -120]
            upper: [0, -10, -60]

    # move the forklift around and rotate
    with.forklift:
      modify.pose:
        rotation:
          distribution.uniform:
            lower: [0, 0, 0]
            upper: [0, 0, 359]
      # randomizer.scatter_2d:
      #   seed: 0
      #   surface_prims: floor
      #   no_coll_prims: racks_and_walls
      #   check_for_collisions: True

    # create and scatter forklifts
    fork_instance:
      randomizer.instantiate:
        paths:
          - omniverse://localhost/NVIDIA/Assets/Isaac/2023.1.1/Isaac/Props/Forklift/forklift.usd
        size: 20
        mode: scene_instance

    with.fork_instance:
      modify.pose:
        rotation:
          distribution.uniform:
            lower: [0, 0, 0]
            upper: [0, 0, 359]
      randomizer.scatter_2d:
        seed: 0
        surface_prims: floor
        no_coll_prims: racks_and_walls
        check_for_collisions: True

    # create and scatter cones
    cone_instance:
      randomizer.instantiate:
        paths:
          - omniverse://localhost/NVIDIA/Assets/Isaac/2023.1.1/Isaac/Environments/Simple_Warehouse/Props/S_TrafficCone.usd
        size: 50
        mode: scene_instance

    with.cone_instance:
      modify.pose:
        rotation:
          distribution.uniform:
            lower: [0, 0, 0]
            upper: [0, 0, 359]
      randomizer.scatter_2d:
        seed: 1
        surface_prims: floor
        no_coll_prims: racks_and_walls
        check_for_collisions: True

    # create and scatter wet floor signs
    wet_floor_sign_instance:
      randomizer.instantiate:
        paths:
          - omniverse://localhost/NVIDIA/Assets/Isaac/2023.1.1/Isaac/Environments/Simple_Warehouse/Props/S_WetFloorSign.usd
        size: 50
        mode: scene_instance

    with.wet_floor_sign_instance:
      modify.pose:
        rotation:
          distribution.uniform:
            lower: [0, 0, 0]
            upper: [0, 0, 359]
      randomizer.scatter_2d:
        seed: 3
        surface_prims: floor
        no_coll_prims: racks_and_walls
        check_for_collisions: True

    # create and scatter cage trolleys
    trolley_instance:
      randomizer.instantiate:
        paths:
          - omniverse://localhost/Library/trolley1-fbx.usd
        size: 50
        use_cache: False

    trolley_wall:
      get.prims:
        semantics: [[class, cagesteel], [class, cagedarksteel]]

    trolley_floor:
      get.prims:
        semantics: [[class, cagefloor]]

    with.trolley_wall:
      randomizer.materials:
        materials:
          - /Replicator/Ref_Xform/Ref/Looks/Painted_Metal_Yellow_A
          - /Replicator/Ref_Xform/Ref/Looks/Painted_Metal_Yellow_Glossy_A
          - /Replicator/Ref_Xform/Ref/Looks/Painted_Metal_Grey_Glossy_A
          - /Replicator/Ref_Xform/Ref/Looks/Painted_Metal_Orange_A
          - /Replicator/Ref_Xform/Ref/Looks/Painted_Metal_Red_A
          # - /Replicator/Ref_Xform/Ref/Looks/Powdercoat_A
      # randomizer.color:
      #   colors:
      #     - [5, 5, 0]
      #     - [111, 111, 111]
      #     - [155, 155, 104]
      #     - [155, 155, 53]

    with.trolley_floor:
      randomizer.materials:
        materials:
          - /Replicator/Ref_Xform/Ref/Looks/Gold_Scratched
          - /Replicator/Ref_Xform/Ref/Looks/Aluminum_Scratched
          - /Replicator/Ref_Xform/Ref/Looks/Stainless_Steel_Milled

    with.trolley_instance:
      # modify.semantics:
      #   semantics: [[class, cagetrolley]]
      modify.pose:
        rotation:
          distribution.uniform:
            lower: [0, 0, 0]
            upper: [0, 0, 359]
      randomizer.scatter_2d:
        seed: 2
        surface_prims: floor
        no_coll_prims: racks_and_walls
        check_for_collisions: True

    # Randomize floor
    with.floor:
      modify.material:
        value:
          - /Replicator/Ref_Xform/Ref/SM_floor27/Looks/MI_Floor_02b
          - /Replicator/Ref_Xform/Ref/Looks/Concrete_Floor_Damage
          - /Replicator/Ref_Xform/Ref/Looks/Concrete_Polished
          - /Replicator/Ref_Xform/Ref/Looks/Concrete_Precast
